Pin: pin-3.11-97998-7ecce2dac
Copyright 2002-2019 Intel Corporation.
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146825]
 Invalid RTN lea rax, ptr [rip+0x1b69e]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x30
 Invalid RTN jnz 0x7f269be5c6a0
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5c6a8
 Invalid RTN test ch, 0x1
 Invalid RTN jz 0x7f269be5c680
 Invalid RTN test byte ptr [rdx+0x71], 0x2
 Invalid RTN jz 0x7f269be5c6d0
 Invalid RTN test cl, 0x20
 Invalid RTN jnz 0x7f269be5c6d0
 Invalid RTN and ecx, 0x8
 Invalid RTN lea rax, ptr [rip+0xc869b]
 Invalid RTN lea rdx, ptr [rip+0xcdd34]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147525]
 Invalid RTN lea rax, ptr [rip+0xeab1e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b988
 Invalid RTN lea rax, ptr [rip+0x17967]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5b988
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x9723]
 Invalid RTN lea rdx, ptr [rip+0xd73ec]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x1464f5]
 Invalid RTN lea rax, ptr [rip+0xe4bee]
 Invalid RTN test byte ptr [rdx+0xc8], 0x1
 Invalid RTN jnz 0x7f269be5c9ab
 Invalid RTN mov ecx, dword ptr [rdx+0x70]
 Invalid RTN test ecx, 0x100000
 Invalid RTN jz 0x7f269be5c996
 Invalid RTN lea rax, ptr [rip+0xdf7d3]
 Invalid RTN test byte ptr [rdx+0xcc], 0x80
 Invalid RTN jz 0x7f269be5c9ab
 Invalid RTN and ch, 0x2
 Invalid RTN lea rax, ptr [rip+0xc3d0]
 Invalid RTN lea rdx, ptr [rip+0xd0549]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147c05]
 Invalid RTN lea rax, ptr [rip+0xe9dee]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b2a8
 Invalid RTN lea rax, ptr [rip+0x1aa67]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5b2a8
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x1a893]
 Invalid RTN lea rdx, ptr [rip+0x12e7c]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x1474c5]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xe9000]
 Invalid RTN lea rax, ptr [rip+0x12099]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN sub rsp, 0x28
 Invalid RTN mov edx, 0x5f
 Invalid RTN mov eax, 0x50e3a8
 Invalid RTN lea rcx, ptr [rip+0xe1ed4]
 Invalid RTN shl rax, 0x4
 Invalid RTN add rcx, 0x1
 Invalid RTN add rax, rdx
 Invalid RTN mov rdx, rax
 Invalid RTN shr rdx, 0x18
 Invalid RTN and edx, 0xf0
 Invalid RTN xor rax, rdx
 Invalid RTN movzx edx, byte ptr [rcx]
 Invalid RTN test dl, dl
 Invalid RTN jnz 0x7f269be8cfb9
 Invalid RTN and eax, 0xfffffff
 Invalid RTN cmp rax, 0x3ae75f6
 Invalid RTN jnz 0x7f269be8d02d
 Invalid RTN lea rax, ptr [rip+0xe1e99]
 Invalid RTN mov rsi, rsp
 Invalid RTN lea rdi, ptr [rip+0xe393d]
 Invalid RTN mov qword ptr [rsp+0x10], 0x0
 Invalid RTN mov qword ptr [rsp], rax
 Invalid RTN mov rax, 0x103ae75f6
 Invalid RTN mov qword ptr [rsp+0x8], rax
 Invalid RTN call 0x7f269bf1ce10
 Invalid RTN shl rax, 0x4
 Invalid RTN add rcx, 0x1
 Invalid RTN add rax, rdx
 Invalid RTN mov rdx, rax
 Invalid RTN shr rdx, 0x18
 Invalid RTN and edx, 0xf0
 Invalid RTN xor rax, rdx
 Invalid RTN movzx edx, byte ptr [rcx]
 Invalid RTN test dl, dl
 Invalid RTN jnz 0x7f269be8cfb9
 Invalid RTN and eax, 0xfffffff
 Invalid RTN cmp rax, 0x3ae75f6
 Invalid RTN jnz 0x7f269be8d02d
 Invalid RTN lea rax, ptr [rip+0xe1e99]
 Invalid RTN mov rsi, rsp
 Invalid RTN lea rdi, ptr [rip+0xe393d]
 Invalid RTN mov qword ptr [rsp+0x10], 0x0
 Invalid RTN mov qword ptr [rsp], rax
 Invalid RTN mov rax, 0x103ae75f6
 Invalid RTN mov qword ptr [rsp+0x8], rax
 Invalid RTN call 0x7f269bf1ce10
 Invalid RTN nop edx, edi
 Invalid RTN sub rsp, 0x38
 Invalid RTN mov r10, qword ptr [rip+0x86041]
 Invalid RTN mov rax, qword ptr fs:[0x28]
 Invalid RTN mov qword ptr [rsp+0x28], rax
 Invalid RTN xor eax, eax
 Invalid RTN mov rax, qword ptr [r10+0x198]
 Invalid RTN test rax, rax
 Invalid RTN jz 0x7f269bf1cea1
 Invalid RTN lea rdx, ptr [rsp+0x10]
 Invalid RTN pxor xmm0, xmm0
 Invalid RTN mov r8, rsi
 Invalid RTN xor r9d, r9d
 Invalid RTN mov qword ptr [rsp+0x8], rdx
 Invalid RTN mov rsi, rax
 Invalid RTN lea rdx, ptr [rsp+0x8]
 Invalid RTN lea rcx, ptr [rax+0x390]
 Invalid RTN movaps xmmword ptr [rsp+0x10], xmm0
 Invalid RTN mov qword ptr [rsp+0x20], 0x0
 Invalid RTN mov byte ptr [rsp+0x14], 0x20
 Invalid RTN push 0x0
 Invalid RTN push 0x0
 Invalid RTN call qword ptr [r10+0x1b8]
 Invalid RTN mov rdx, rax
 Invalid RTN mov rax, qword ptr [rsp+0x18]
 Invalid RTN pop rcx
 Invalid RTN pop rsi
 Invalid RTN test rax, rax
 Invalid RTN jz 0x7f269bf1cea1
 Invalid RTN cmp word ptr [rax+0x6], 0xfff1
 Invalid RTN jz 0x7f269bf1cec0
 Invalid RTN test rdx, rdx
 Invalid RTN jz 0x7f269bf1cec0
 Invalid RTN mov rdx, qword ptr [rdx]
 Invalid RTN add rdx, qword ptr [rax+0x8]
 Invalid RTN mov rax, rdx
 Invalid RTN mov rcx, qword ptr [rsp+0x28]
 Invalid RTN xor rcx, qword ptr fs:[0x28]
 Invalid RTN jnz 0x7f269bf1cec4
 Invalid RTN add rsp, 0x38
 Invalid RTN ret 
 Invalid RTN lea rdx, ptr [rip-0x91]
 Invalid RTN test rax, rax
 Invalid RTN cmovz rax, rdx
 Invalid RTN add rsp, 0x28
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x145055]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xe2e90]
 Invalid RTN lea rax, ptr [rip+0xa559]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x129fc5]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xcf5e0]
 Invalid RTN lea rax, ptr [rip+0x113a9]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x12a485]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xcfd70]
 Invalid RTN lea rax, ptr [rip+0x11b99]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x1466c5]
 Invalid RTN lea rax, ptr [rip+0x1b50e]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x30
 Invalid RTN jnz 0x7f269be5c800
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5c808
 Invalid RTN test ch, 0x1
 Invalid RTN jz 0x7f269be5c7e0
 Invalid RTN test byte ptr [rdx+0x71], 0x2
 Invalid RTN jz 0x7f269be5c830
 Invalid RTN test cl, 0x20
 Invalid RTN jnz 0x7f269be5c830
 Invalid RTN and ecx, 0x8
 Invalid RTN lea rax, ptr [rip+0xc5b3b]
 Invalid RTN lea rdx, ptr [rip+0xcb0c4]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146895]
 Invalid RTN mov rax, 0x80000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov ecx, dword ptr [rdx+0x70]
 Invalid RTN cmp rax, 0x2
 Invalid RTN jz 0x7f269be5c610
 Invalid RTN lea rax, ptr [rip+0xed424]
 Invalid RTN test ecx, 0x80000
 Invalid RTN jnz 0x7f269be5c609
 Invalid RTN and ch, 0x2
 Invalid RTN lea rax, ptr [rip+0xc372]
 Invalid RTN lea rdx, ptr [rip+0xf0d2b]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147595]
 Invalid RTN lea rax, ptr [rip+0xe4bfe]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b922
 Invalid RTN mov edx, dword ptr [rcx+0x70]
 Invalid RTN test edx, 0x100000
 Invalid RTN jz 0x7f269be5b90d
 Invalid RTN lea rax, ptr [rip+0xdf87c]
 Invalid RTN test byte ptr [rcx+0xcc], 0x80
 Invalid RTN jz 0x7f269be5b922
 Invalid RTN and dh, 0x2
 Invalid RTN lea rax, ptr [rip+0xaee9]
 Invalid RTN lea rdx, ptr [rip+0xc5292]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147b55]
 Invalid RTN lea rax, ptr [rip+0xe4d7e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b358
 Invalid RTN lea rax, ptr [rip+0xb217]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5b358
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x9db3]
 Invalid RTN lea rdx, ptr [rip+0xc45ec]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146765]
 Invalid RTN lea rax, ptr [rip+0x1b9ee]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x10
 Invalid RTN jnz 0x7f269be5c764
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5c768
 Invalid RTN mov eax, dword ptr [rdx+0x7c]
 Invalid RTN and eax, 0x200
 Invalid RTN test byte ptr [rdx+0xc8], 0x2
 Invalid RTN jz 0x7f269be5c750
 Invalid RTN test eax, eax
 Invalid RTN lea rdx, ptr [rip+0x1b9c7]
 Invalid RTN lea rax, ptr [rip+0x1b940]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x12a4c5]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xd0720]
 Invalid RTN lea rax, ptr [rip+0x129e9]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x147635]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xe94e0]
 Invalid RTN lea rax, ptr [rip+0x126a9]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x147a75]
 Invalid RTN lea rdx, ptr [rip+0xe48ee]
 Invalid RTN test byte ptr [rax+0x72], 0x10
 Invalid RTN lea rax, ptr [rip+0x1c633]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x1464a5]
 Invalid RTN lea rax, ptr [rip+0xe621e]
 Invalid RTN test byte ptr [rdx+0xc8], 0x1
 Invalid RTN jnz 0x7f269be5c9fb
 Invalid RTN mov ecx, dword ptr [rdx+0x70]
 Invalid RTN test ecx, 0x100000
 Invalid RTN jz 0x7f269be5c9e6
 Invalid RTN lea rax, ptr [rip+0xe1333]
 Invalid RTN test byte ptr [rdx+0xcc], 0x80
 Invalid RTN jz 0x7f269be5c9fb
 Invalid RTN and ch, 0x2
 Invalid RTN lea rax, ptr [rip+0xe5d0]
 Invalid RTN lea rdx, ptr [rip+0xd2659]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147ad5]
 Invalid RTN lea rax, ptr [rip+0xead3e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b3d8
 Invalid RTN lea rax, ptr [rip+0x178e7]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5b3d8
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x176f3]
 Invalid RTN lea rdx, ptr [rip+0xd61ec]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146355]
 Invalid RTN lea rax, ptr [rip+0x1b1ce]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x30
 Invalid RTN jnz 0x7f269be5cb70
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5cb78
 Invalid RTN test ch, 0x1
 Invalid RTN jz 0x7f269be5cb50
 Invalid RTN test byte ptr [rdx+0x71], 0x2
 Invalid RTN jz 0x7f269be5cba0
 Invalid RTN test cl, 0x20
 Invalid RTN jnz 0x7f269be5cba0
 Invalid RTN and ecx, 0x8
 Invalid RTN lea rax, ptr [rip+0xc57eb]
 Invalid RTN lea rdx, ptr [rip+0xcad74]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x128d55]
 Invalid RTN lea rax, ptr [rip+0xcf5ae]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be7a148
 Invalid RTN test byte ptr [rcx+0x72], 0x8
 Invalid RTN lea rax, ptr [rip+0x11943]
 Invalid RTN lea rdx, ptr [rip+0x1171c]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x129ef5]
 Invalid RTN lea r8, ptr [rip-0xf02]
 Invalid RTN mov rcx, 0x10000000002
 Invalid RTN mov rdx, qword ptr [rax+0xc8]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, rdx
 Invalid RTN cmp rax, rcx
 Invalid RTN jnz 0x7f269be78fb8
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN lea r8, ptr [rip+0xd3e6a]
 Invalid RTN and rdx, rax
 Invalid RTN lea rax, ptr [rip+0xcefe0]
 Invalid RTN cmp rdx, 0x4
 Invalid RTN cmovnz r8, rax
 Invalid RTN mov rax, r8
 Invalid RTN ret 
 Invalid RTN mov rax, r8
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x12a445]
 Invalid RTN lea rdx, ptr [rip+0xc132e]
 Invalid RTN test byte ptr [rax+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x12953]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x147485]
 Invalid RTN lea rdx, ptr [rip+0xe443e]
 Invalid RTN test byte ptr [rax+0x72], 0x10
 Invalid RTN lea rax, ptr [rip+0x1c0f3]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147ba5]
 Invalid RTN lea rax, ptr [rip+0xe92de]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b2fb
 Invalid RTN test byte ptr [rcx+0xcc], 0x40
 Invalid RTN lea rax, ptr [rip+0x12330]
 Invalid RTN lea rdx, ptr [rip+0xf1d19]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x147675]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xe9380]
 Invalid RTN lea rax, ptr [rip+0x12549]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x13e105]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xdc090]
 Invalid RTN lea rax, ptr [rip+0x3819]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146455]
 Invalid RTN lea rax, ptr [rip+0xe4b62]
 Invalid RTN test byte ptr [rdx+0xc8], 0x1
 Invalid RTN jnz 0x7f269be5ca4b
 Invalid RTN mov ecx, dword ptr [rdx+0x70]
 Invalid RTN test ecx, 0x100000
 Invalid RTN jz 0x7f269be5ca36
 Invalid RTN lea rax, ptr [rip+0xdf747]
 Invalid RTN test byte ptr [rdx+0xcc], 0x80
 Invalid RTN jz 0x7f269be5ca4b
 Invalid RTN and ch, 0x2
 Invalid RTN lea rax, ptr [rip+0xc350]
 Invalid RTN lea rdx, ptr [rip+0xd04c9]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x1468d5]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xe4440]
 Invalid RTN lea rax, ptr [rip+0xbaa9]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x12a375]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xd09f0]
 Invalid RTN lea rax, ptr [rip+0x12fa9]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x1471c5]
 Invalid RTN lea rdx, ptr [rip+0xe42be]
 Invalid RTN test byte ptr [rax+0x72], 0x10
 Invalid RTN lea rax, ptr [rip+0x1bee3]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x146555]
 Invalid RTN lea rax, ptr [rip+0xea85e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5c958
 Invalid RTN lea rax, ptr [rip+0x18067]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5c958
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x86e3]
 Invalid RTN lea rdx, ptr [rip+0xda7ac]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x1465b5]
 Invalid RTN lea rax, ptr [rip+0xea50e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5c8f8
 Invalid RTN lea rax, ptr [rip+0x17a07]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5c8f8
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x162c3]
 Invalid RTN lea rdx, ptr [rip+0xd8ffc]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x129f85]
 Invalid RTN mov rax, 0x80000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov ecx, dword ptr [rdx+0x70]
 Invalid RTN cmp rax, 0x2
 Invalid RTN jz 0x7f269be78f20
 Invalid RTN lea rax, ptr [rip+0xd2154]
 Invalid RTN test ecx, 0x80000
 Invalid RTN jnz 0x7f269be78f19
 Invalid RTN and ch, 0x2
 Invalid RTN lea rax, ptr [rip+0x112e2]
 Invalid RTN lea rdx, ptr [rip+0xd5b8b]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x145015]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xe6960]
 Invalid RTN lea rax, ptr [rip+0xf9d9]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146405]
 Invalid RTN lea rax, ptr [rip+0xe6192]
 Invalid RTN test byte ptr [rdx+0xc8], 0x1
 Invalid RTN jnz 0x7f269be5ca9b
 Invalid RTN mov ecx, dword ptr [rdx+0x70]
 Invalid RTN test ecx, 0x100000
 Invalid RTN jz 0x7f269be5ca86
 Invalid RTN lea rax, ptr [rip+0xe12a7]
 Invalid RTN test byte ptr [rdx+0xcc], 0x80
 Invalid RTN jz 0x7f269be5ca9b
 Invalid RTN and ch, 0x2
 Invalid RTN lea rax, ptr [rip+0xe550]
 Invalid RTN lea rdx, ptr [rip+0xd25d9]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN sub rsp, 0x28
 Invalid RTN mov edx, 0x5f
 Invalid RTN mov eax, 0x50e3a8
 Invalid RTN lea rcx, ptr [rip+0xe1df4]
 Invalid RTN shl rax, 0x4
 Invalid RTN add rcx, 0x1
 Invalid RTN add rax, rdx
 Invalid RTN mov rdx, rax
 Invalid RTN shr rdx, 0x18
 Invalid RTN and edx, 0xf0
 Invalid RTN xor rax, rdx
 Invalid RTN movzx edx, byte ptr [rcx]
 Invalid RTN test dl, dl
 Invalid RTN jnz 0x7f269be8d099
 Invalid RTN and eax, 0xfffffff
 Invalid RTN cmp rax, 0x3ae75f6
 Invalid RTN jnz 0x7f269be8d10d
 Invalid RTN lea rax, ptr [rip+0xe1db9]
 Invalid RTN mov rsi, rsp
 Invalid RTN lea rdi, ptr [rip+0xe3869]
 Invalid RTN mov qword ptr [rsp+0x10], 0x0
 Invalid RTN mov qword ptr [rsp], rax
 Invalid RTN mov rax, 0x103ae75f6
 Invalid RTN mov qword ptr [rsp+0x8], rax
 Invalid RTN call 0x7f269bf1ce10
 Invalid RTN shl rax, 0x4
 Invalid RTN add rcx, 0x1
 Invalid RTN add rax, rdx
 Invalid RTN mov rdx, rax
 Invalid RTN shr rdx, 0x18
 Invalid RTN and edx, 0xf0
 Invalid RTN xor rax, rdx
 Invalid RTN movzx edx, byte ptr [rcx]
 Invalid RTN test dl, dl
 Invalid RTN jnz 0x7f269be8d099
 Invalid RTN and eax, 0xfffffff
 Invalid RTN cmp rax, 0x3ae75f6
 Invalid RTN jnz 0x7f269be8d10d
 Invalid RTN lea rax, ptr [rip+0xe1db9]
 Invalid RTN mov rsi, rsp
 Invalid RTN lea rdi, ptr [rip+0xe3869]
 Invalid RTN mov qword ptr [rsp+0x10], 0x0
 Invalid RTN mov qword ptr [rsp], rax
 Invalid RTN mov rax, 0x103ae75f6
 Invalid RTN mov qword ptr [rsp+0x8], rax
 Invalid RTN call 0x7f269bf1ce10
 Invalid RTN lea rdx, ptr [rip-0xb1]
 Invalid RTN test rax, rax
 Invalid RTN cmovz rax, rdx
 Invalid RTN add rsp, 0x28
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146825]
 Invalid RTN lea rax, ptr [rip+0x1b69e]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x30
 Invalid RTN jnz 0x7f269be5c6a0
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5c6a8
 Invalid RTN test ch, 0x1
 Invalid RTN jz 0x7f269be5c680
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x1469b5]
 Invalid RTN lea rdx, ptr [rip-0x362]
 Invalid RTN test byte ptr [rax+0xcc], 0x10
 Invalid RTN lea rax, ptr [rip+0x1b0d0]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x1464f5]
 Invalid RTN lea rax, ptr [rip+0xe4bee]
 Invalid RTN test byte ptr [rdx+0xc8], 0x1
 Invalid RTN jnz 0x7f269be5c9ab
 Invalid RTN mov ecx, dword ptr [rdx+0x70]
 Invalid RTN test ecx, 0x100000
 Invalid RTN jz 0x7f269be5c996
 Invalid RTN lea rax, ptr [rip+0xdf7d3]
 Invalid RTN test byte ptr [rdx+0xcc], 0x80
 Invalid RTN jz 0x7f269be5c9ab
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147ad5]
 Invalid RTN lea rax, ptr [rip+0xead3e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b3d8
 Invalid RTN lea rax, ptr [rip+0x178e7]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5b3d8
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x176f3]
 Invalid RTN lea rdx, ptr [rip+0xd61ec]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x145015]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xe6960]
 Invalid RTN lea rax, ptr [rip+0xf9d9]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x1465b5]
 Invalid RTN lea rax, ptr [rip+0xea50e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5c8f8
 Invalid RTN lea rax, ptr [rip+0x17a07]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5c8f8
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x162c3]
 Invalid RTN lea rdx, ptr [rip+0xd8ffc]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x147675]
 Invalid RTN mov rax, 0x90000000002
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN mov rdx, 0x10000000002
 Invalid RTN cmp rax, rdx
 Invalid RTN lea rdx, ptr [rip+0xe9380]
 Invalid RTN lea rax, ptr [rip+0x12549]
 Invalid RTN cmovz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147ba5]
 Invalid RTN lea rax, ptr [rip+0xe92de]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b2fb
 Invalid RTN test byte ptr [rcx+0xcc], 0x40
 Invalid RTN lea rax, ptr [rip+0x12330]
 Invalid RTN lea rdx, ptr [rip+0xf1d19]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146765]
 Invalid RTN lea rax, ptr [rip+0x1b9ee]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x10
 Invalid RTN jnz 0x7f269be5c764
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5c768
 Invalid RTN mov eax, dword ptr [rdx+0x7c]
 Invalid RTN and eax, 0x200
 Invalid RTN test byte ptr [rdx+0xc8], 0x2
 Invalid RTN jz 0x7f269be5c750
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x1471c5]
 Invalid RTN lea rdx, ptr [rip+0xe42be]
 Invalid RTN test byte ptr [rax+0x72], 0x10
 Invalid RTN lea rax, ptr [rip+0x1bee3]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x147a75]
 Invalid RTN lea rdx, ptr [rip+0xe48ee]
 Invalid RTN test byte ptr [rax+0x72], 0x10
 Invalid RTN lea rax, ptr [rip+0x1c633]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x147b55]
 Invalid RTN lea rax, ptr [rip+0xe4d7e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5b358
 Invalid RTN lea rax, ptr [rip+0xb217]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5b358
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x9db3]
 Invalid RTN lea rdx, ptr [rip+0xc45ec]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146355]
 Invalid RTN lea rax, ptr [rip+0x1b1ce]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x30
 Invalid RTN jnz 0x7f269be5cb70
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5cb78
 Invalid RTN test ch, 0x1
 Invalid RTN jz 0x7f269be5cb50
 Invalid RTN nop edx, edi
 Invalid RTN mov rax, qword ptr [rip+0x147485]
 Invalid RTN lea rdx, ptr [rip+0xe443e]
 Invalid RTN test byte ptr [rax+0x72], 0x10
 Invalid RTN lea rax, ptr [rip+0x1c0f3]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rcx, qword ptr [rip+0x146555]
 Invalid RTN lea rax, ptr [rip+0xea85e]
 Invalid RTN mov rdx, 0x90000000002
 Invalid RTN mov rsi, 0x10000000002
 Invalid RTN and rdx, qword ptr [rcx+0xc8]
 Invalid RTN cmp rdx, rsi
 Invalid RTN jz 0x7f269be5c958
 Invalid RTN lea rax, ptr [rip+0x18067]
 Invalid RTN test byte ptr [rcx+0xcc], 0x10
 Invalid RTN jnz 0x7f269be5c958
 Invalid RTN test byte ptr [rcx+0x71], 0x2
 Invalid RTN lea rax, ptr [rip+0x86e3]
 Invalid RTN lea rdx, ptr [rip+0xda7ac]
 Invalid RTN cmovnz rax, rdx
 Invalid RTN ret 
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x1466c5]
 Invalid RTN lea rax, ptr [rip+0x1b50e]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x30
 Invalid RTN jnz 0x7f269be5c800
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5c808
 Invalid RTN test ch, 0x1
 Invalid RTN jz 0x7f269be5c7e0
 Invalid RTN nop edx, edi
 Invalid RTN mov rdx, qword ptr [rip+0x146825]
 Invalid RTN lea rax, ptr [rip+0x1b69e]
 Invalid RTN mov ecx, dword ptr [rdx+0xcc]
 Invalid RTN test ch, 0x30
 Invalid RTN jnz 0x7f269be5c6a0
 Invalid RTN mov rax, 0x400000000004
 Invalid RTN and rax, qword ptr [rdx+0xc8]
 Invalid RTN cmp rax, 0x4
 Invalid RTN jz 0x7f269be5c6a8
 Invalid RTN test ch, 0x1
 Invalid RTN jz 0x7f269be5c680
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included xor ebp, ebp
 ins:xor ebp, ebp
 reg:ebp
 Exe .text
 INSTSELECTOR: instruction to be included mov r9, rdx
 ins:mov r9, rdx
 reg:r9
 Exe .text
 INSTSELECTOR: instruction to be included pop rsi
 ins:pop rsi
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, rsp
 ins:mov rdx, rsp
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included and rsp, 0xfffffffffffffff0
 ins:and rsp, 0xfffffffffffffff0
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push rax
 ins:push rax
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push rsp
 ins:push rsp
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included lea r8, ptr [rip+0x11af6]
 ins:lea r8, ptr [rip+0x11af6]
 reg:r8
 Exe .text
 INSTSELECTOR: instruction to be included lea rcx, ptr [rip+0x11a7f]
 ins:lea rcx, ptr [rip+0x11a7f]
 reg:rcx
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rip-0x208]
 ins:lea rdi, ptr [rip-0x208]
 reg:rdi
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included push r15
 ins:push r15
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov r15, rdx
 ins:mov r15, rdx
 reg:r15
 Exe .text
 INSTSELECTOR: instruction to be included push r14
 ins:push r14
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov r14, rsi
 ins:mov r14, rsi
 reg:r14
 Exe .text
 INSTSELECTOR: instruction to be included push r13
 ins:push r13
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov r13d, edi
 ins:mov r13d, edi
 reg:r13d
 Exe .text
 INSTSELECTOR: instruction to be included push r12
 ins:push r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included lea r12, ptr [rip+0x77a4]
 ins:lea r12, ptr [rip+0x77a4]
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included push rbp
 ins:push rbp
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included lea rbp, ptr [rip+0x77a4]
 ins:lea rbp, ptr [rip+0x77a4]
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included push rbx
 ins:push rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included sub rbp, r12
 ins:sub rbp, r12
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0x8
 ins:sub rsp, 0x8
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included sar rbp, 0x3
 ins:sar rbp, 0x3
 reg:rbp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included xor ebx, ebx
 ins:xor ebx, ebx
 reg:ebx
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, r15
 ins:mov rdx, r15
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included mov rsi, r14
 ins:mov rsi, r14
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included mov edi, r13d
 ins:mov edi, r13d
 reg:edi
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rip+0x1a509]
 ins:lea rdi, ptr [rip+0x1a509]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included lea rsi, ptr [rip+0x1a502]
 ins:lea rsi, ptr [rip+0x1a502]
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included sub rsi, rdi
 ins:sub rsi, rdi
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, rsi
 ins:mov rax, rsi
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included shr rsi, 0x3f
 ins:shr rsi, 0x3f
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included sar rax, 0x3
 ins:sar rax, 0x3
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included add rsi, rax
 ins:add rsi, rax
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included sar rsi, 0x1
 ins:sar rsi, 0x1
 reg:rsi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [rip+0x1a275]
 ins:mov rax, qword ptr [rip+0x1a275]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included test rax, rax
 ins:test rax, rax
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rbx, 0x1
 ins:add rbx, 0x1
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included cmp rbp, rbx
 ins:cmp rbp, rbx
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop rbp
 ins:pop rbp
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included pop r13
 ins:pop r13
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r14
 ins:pop r14
 reg:r14
 Exe .text
 INSTSELECTOR: instruction to be included pop r15
 ins:pop r15
 reg:rsp
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included push rbx
 ins:push rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0x110
 ins:sub rsp, 0x110
 reg:rsp
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr fs:[0x28]
 ins:mov rax, qword ptr fs:[0x28]
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included xor eax, eax
 ins:xor eax, eax
 reg:eax
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rsp+0x40]
 ins:lea rdi, ptr [rsp+0x40]
 reg:rdi
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rax, ptr [rsp+0x40]
 ins:lea rax, ptr [rsp+0x40]
 reg:rax
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included push rbp
 ins:push rbp
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov edi, 0x11
 ins:mov edi, 0x11
 reg:edi
 Exe .text
 INSTSELECTOR: instruction to be included push rbx
 ins:push rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0x138
 ins:sub rsp, 0x138
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr fs:[0x28]
 ins:mov rax, qword ptr fs:[0x28]
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included xor eax, eax
 ins:xor eax, eax
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included lea rax, ptr [rip+0x99a4]
 ins:lea rax, ptr [rip+0x99a4]
 reg:rax
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included push r14
 ins:push r14
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included movsxd rdx, edi
 ins:movsxd rdx, edi
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included push r13
 ins:push r13
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push r12
 ins:push r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push rbp
 ins:push rbp
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rbp, rdx
 ins:mov rbp, rdx
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included push rbx
 ins:push rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0xa0
 ins:sub rsp, 0xa0
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr fs:[0x28]
 ins:mov rax, qword ptr fs:[0x28]
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included xor eax, eax
 ins:xor eax, eax
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included lea rax, ptr [rip+0xc7dd]
 ins:lea rax, ptr [rip+0xc7dd]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [rax+rdx*8]
 ins:mov rax, qword ptr [rax+rdx*8]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included test rax, rax
 ins:test rax, rax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included xor ebx, ebx
 ins:xor ebx, ebx
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included cmp byte ptr [rax], 0x0
 ins:cmp byte ptr [rax], 0x0
 reg:rflags
 NORMAL FLAG REG: inst cmp byte ptr [rax], 0x0
 Exe .text
 INSTSELECTOR: instruction to be included setz bl
 ins:setz bl
 reg:bl
 Exe .text
 INSTSELECTOR: instruction to be included add ebx, 0x2
 ins:add ebx, 0x2
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included cmp ebp, 0x11
 ins:cmp ebp, 0x11
 reg:rflags
 NORMAL FLAG REG: inst cmp ebp, 0x11
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, 0x2
 ins:mov eax, 0x2
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmovz ebx, eax
 ins:cmovz ebx, eax
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included lea r12d, ptr [rbp-0x1]
 ins:lea r12d, ptr [rbp-0x1]
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included lea r13, ptr [rip+0xf08f]
 ins:lea r13, ptr [rip+0xf08f]
 reg:r13
 Exe .text
 INSTSELECTOR: instruction to be included movsxd r12, r12d
 ins:movsxd r12, r12d
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included movsx eax, byte ptr [r13+r12*1]
 ins:movsx eax, byte ptr [r13+r12*1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included test al, al
 ins:test al, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x4
 ins:cmp al, 0x4
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, dword ptr [rip+0xecc2]
 ins:mov eax, dword ptr [rip+0xecc2]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp edx, 0x16
 ins:cmp edx, 0x16
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rcx, ptr [rip+0x5312]
 ins:lea rcx, ptr [rip+0x5312]
 reg:rcx
 Exe .text
 INSTSELECTOR: instruction to be included mov edx, edx
 ins:mov edx, edx
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included movsxd rax, dword ptr [rcx+rdx*4]
 ins:movsxd rax, dword ptr [rcx+rdx*4]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included add rax, rcx
 ins:add rax, rcx
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov ebx, 0x1
 ins:mov ebx, 0x1
 reg:ebx
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp ebp, 0x11
 ins:cmp ebp, 0x11
 reg:rflags
 NORMAL FLAG REG: inst cmp ebp, 0x11
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, 0x2
 ins:mov eax, 0x2
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmovz ebx, eax
 ins:cmovz ebx, eax
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included lea r12d, ptr [rbp-0x1]
 ins:lea r12d, ptr [rbp-0x1]
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included lea r13, ptr [rip+0xf08f]
 ins:lea r13, ptr [rip+0xf08f]
 reg:r13
 Exe .text
 INSTSELECTOR: instruction to be included movsxd r12, r12d
 ins:movsxd r12, r12d
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included movsx eax, byte ptr [r13+r12*1]
 ins:movsx eax, byte ptr [r13+r12*1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included test al, al
 ins:test al, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x4
 ins:cmp al, 0x4
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r14, rsp
 ins:mov r14, rsp
 reg:r14
 Exe .text
 INSTSELECTOR: instruction to be included cmp ebx, eax
 ins:cmp ebx, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp ebx, 0x2
 ins:cmp ebx, 0x2
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included xor eax, eax
 ins:xor eax, eax
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp ebx, 0x3
 ins:cmp ebx, 0x3
 reg:rflags
 NORMAL FLAG REG: inst cmp ebx, 0x3
 Exe .text
 INSTSELECTOR: instruction to be included setz al
 ins:setz al
 reg:al
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rsp+0x8]
 ins:lea rdi, ptr [rsp+0x8]
 reg:rdi
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rax, ptr [rip-0x1f7]
 ins:lea rax, ptr [rip-0x1f7]
 reg:rax
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rsp+0x8]
 ins:lea rdi, ptr [rsp+0x8]
 reg:rdi
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included xor edx, edx
 ins:xor edx, edx
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included mov rsi, r14
 ins:mov rsi, r14
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included mov edi, ebp
 ins:mov edi, ebp
 reg:edi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [rsp+0x98]
 ins:mov rax, qword ptr [rsp+0x98]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included xor rax, qword ptr fs:[0x28]
 ins:xor rax, qword ptr fs:[0x28]
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0xa0
 ins:add rsp, 0xa0
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included pop rbp
 ins:pop rbp
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included pop r13
 ins:pop r13
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r14
 ins:pop r14
 reg:rsp
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rip+0x9e35]
 ins:lea rdi, ptr [rip+0x9e35]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0x8
 ins:sub rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included lea r8, ptr [rip+0xa42a]
 ins:lea r8, ptr [rip+0xa42a]
 reg:r8
 Exe .text
 INSTSELECTOR: instruction to be included mov r9d, 0xa41a41a5
 ins:mov r9d, 0xa41a41a5
 reg:r9d
 Exe .text
 INSTSELECTOR: instruction to be included lea r10, ptr [rdi+0x100]
 ins:lea r10, ptr [rdi+0x100]
 reg:r10
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, qword ptr [rdi+0x10]
 ins:mov rdx, qword ptr [rdi+0x10]
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included movzx esi, byte ptr [rdx]
 ins:movzx esi, byte ptr [rdx]
 reg:esi
 Exe .text
 INSTSELECTOR: instruction to be included mov ecx, esi
 ins:mov ecx, esi
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included shl ecx, 0x4
 ins:shl ecx, 0x4
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included cmp sil, 0x3d
 ins:cmp sil, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test sil, sil
 ins:test sil, sil
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, byte ptr [rdx+0x1]
 ins:movzx eax, byte ptr [rdx+0x1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add rdx, 0x1
 ins:add rdx, 0x1
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included add ecx, esi
 ins:add ecx, esi
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included test al, al
 ins:test al, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x3d
 ins:cmp al, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included imul rax, r9
 ins:imul rax, r9
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included shr rax, 0x20
 ins:shr rax, 0x20
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, rax
 ins:mov rdx, rax
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub eax, edx
 ins:sub eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x1
 ins:shr eax, 0x1
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add eax, edx
 ins:add eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x5
 ins:shr eax, 0x5
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included imul eax, eax, 0x27
 ins:imul eax, eax, 0x27
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub ecx, eax
 ins:sub ecx, eax
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [r8+rcx*8]
 ins:mov rax, qword ptr [r8+rcx*8]
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rdi, 0x20
 ins:add rdi, 0x20
 reg:rdi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp rdi, r10
 ins:cmp rdi, r10
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movzx esi, al
 ins:movzx esi, al
 reg:esi
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, byte ptr [rdx+0x1]
 ins:movzx eax, byte ptr [rdx+0x1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add rdx, 0x1
 ins:add rdx, 0x1
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included add ecx, esi
 ins:add ecx, esi
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included test al, al
 ins:test al, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x3d
 ins:cmp al, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included imul rax, r9
 ins:imul rax, r9
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included shr rax, 0x20
 ins:shr rax, 0x20
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, rax
 ins:mov rdx, rax
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub eax, edx
 ins:sub eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x1
 ins:shr eax, 0x1
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add eax, edx
 ins:add eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x5
 ins:shr eax, 0x5
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included imul eax, eax, 0x27
 ins:imul eax, eax, 0x27
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub ecx, eax
 ins:sub ecx, eax
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [r8+rcx*8]
 ins:mov rax, qword ptr [r8+rcx*8]
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rdi, 0x20
 ins:add rdi, 0x20
 reg:rdi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp rdi, r10
 ins:cmp rdi, r10
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, qword ptr [rdi+0x10]
 ins:mov rdx, qword ptr [rdi+0x10]
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included movzx esi, byte ptr [rdx]
 ins:movzx esi, byte ptr [rdx]
 reg:esi
 Exe .text
 INSTSELECTOR: instruction to be included mov ecx, esi
 ins:mov ecx, esi
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included shl ecx, 0x4
 ins:shl ecx, 0x4
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included cmp sil, 0x3d
 ins:cmp sil, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test sil, sil
 ins:test sil, sil
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included imul rax, r9
 ins:imul rax, r9
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included shr rax, 0x20
 ins:shr rax, 0x20
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, rax
 ins:mov rdx, rax
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub eax, edx
 ins:sub eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x1
 ins:shr eax, 0x1
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add eax, edx
 ins:add eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x5
 ins:shr eax, 0x5
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included imul eax, eax, 0x27
 ins:imul eax, eax, 0x27
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub ecx, eax
 ins:sub ecx, eax
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [r8+rcx*8]
 ins:mov rax, qword ptr [r8+rcx*8]
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rdi, 0x20
 ins:add rdi, 0x20
 reg:rdi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp rdi, r10
 ins:cmp rdi, r10
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rdx, ptr [rip+0x325c]
 ins:lea rdx, ptr [rip+0x325c]
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 NORMAL FLAG REG: inst test eax, eax
 Exe .text
 INSTSELECTOR: instruction to be included lea rax, ptr [rip+0x324c]
 ins:lea rax, ptr [rip+0x324c]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included cmovnz rax, rdx
 ins:cmovnz rax, rdx
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rbx, qword ptr [rip+0x9114]
 ins:mov rbx, qword ptr [rip+0x9114]
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, qword ptr [rbx]
 ins:mov rdi, qword ptr [rbx]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included test rdi, rdi
 ins:test rdi, rdi
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included push r12
 ins:push r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push rbx
 ins:push rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rbx, rdi
 ins:mov rbx, rdi
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0x8
 ins:sub rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included movzx r12d, byte ptr [rdi]
 ins:movzx r12d, byte ptr [rdi]
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included cmp r12b, 0x5f
 ins:cmp r12b, 0x5f
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r8, rax
 ins:mov r8, rax
 reg:r8
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, r12b
 ins:movzx eax, r12b
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included mov r12, rbx
 ins:mov r12, rbx
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, qword ptr [r8]
 ins:mov rdx, qword ptr [r8]
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included test byte ptr [rdx+rax*2+0x1], 0x4
 ins:test byte ptr [rdx+rax*2+0x1], 0x4
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea r12, ptr [rbx+0x1]
 ins:lea r12, ptr [rbx+0x1]
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included movzx ebx, byte ptr [rbx+0x1]
 ins:movzx ebx, byte ptr [rbx+0x1]
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included test bl, bl
 ins:test bl, bl
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp bl, 0x5f
 ins:cmp bl, 0x5f
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [rax]
 ins:mov rax, qword ptr [rax]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included test byte ptr [rax+rbx*2], 0x8
 ins:test byte ptr [rax+rbx*2], 0x8
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movzx ebx, byte ptr [r12+0x1]
 ins:movzx ebx, byte ptr [r12+0x1]
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included add r12, 0x1
 ins:add r12, 0x1
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included test bl, bl
 ins:test bl, bl
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r12
 ins:mov rax, r12
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:r12
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp bl, 0x5f
 ins:cmp bl, 0x5f
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r12
 ins:mov rax, r12
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:r12
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, qword ptr [rbx]
 ins:mov rdi, qword ptr [rbx]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included cmp rdi, rax
 ins:cmp rdi, rax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp byte ptr [rax], 0x3d
 ins:cmp byte ptr [rax], 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov esi, 0x9
 ins:mov esi, 0x9
 reg:esi
 Exe .text
 INSTSELECTOR: instruction to be included add rbx, 0x8
 ins:add rbx, 0x8
 reg:rbx
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included push r15
 ins:push r15
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push r14
 ins:push r14
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push r13
 ins:push r13
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push r12
 ins:push r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push rbp
 ins:push rbp
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rbp, rdi
 ins:mov rbp, rdi
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included push rbx
 ins:push rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0x8
 ins:sub rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included movzx edi, byte ptr [rdi]
 ins:movzx edi, byte ptr [rdi]
 reg:edi
 Exe .text
 INSTSELECTOR: instruction to be included mov ecx, edi
 ins:mov ecx, edi
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included shl ecx, 0x4
 ins:shl ecx, 0x4
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included cmp dil, 0x3d
 ins:cmp dil, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test dil, dil
 ins:test dil, dil
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, rbp
 ins:mov rdx, rbp
 reg:rdx
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, byte ptr [rdx+0x1]
 ins:movzx eax, byte ptr [rdx+0x1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add rdx, 0x1
 ins:add rdx, 0x1
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included add ecx, edi
 ins:add ecx, edi
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included test al, al
 ins:test al, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x3d
 ins:cmp al, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included mov edx, 0xa41a41a5
 ins:mov edx, 0xa41a41a5
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included movsx ebx, byte ptr [rip+0xc8c9]
 ins:movsx ebx, byte ptr [rip+0xc8c9]
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included imul rax, rdx
 ins:imul rax, rdx
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included and ebx, 0x1
 ins:and ebx, 0x1
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included or ebx, esi
 ins:or ebx, esi
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included mov rsi, rbp
 ins:mov rsi, rbp
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included shr rax, 0x20
 ins:shr rax, 0x20
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included mov r12d, ebx
 ins:mov r12d, ebx
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, rax
 ins:mov rdx, rax
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub eax, edx
 ins:sub eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x1
 ins:shr eax, 0x1
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add eax, edx
 ins:add eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x5
 ins:shr eax, 0x5
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included imul eax, eax, 0x27
 ins:imul eax, eax, 0x27
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub ecx, eax
 ins:sub ecx, eax
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included lea rax, ptr [rip+0xa2d0]
 ins:lea rax, ptr [rip+0xa2d0]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rax+rcx*8]
 ins:lea rdi, ptr [rax+rcx*8]
 reg:rdi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movzx edi, al
 ins:movzx edi, al
 reg:edi
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, byte ptr [rdx+0x1]
 ins:movzx eax, byte ptr [rdx+0x1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add rdx, 0x1
 ins:add rdx, 0x1
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included add ecx, edi
 ins:add ecx, edi
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included test al, al
 ins:test al, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x3d
 ins:cmp al, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included mov edx, 0xa41a41a5
 ins:mov edx, 0xa41a41a5
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included movsx ebx, byte ptr [rip+0xc8c9]
 ins:movsx ebx, byte ptr [rip+0xc8c9]
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included imul rax, rdx
 ins:imul rax, rdx
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included and ebx, 0x1
 ins:and ebx, 0x1
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included or ebx, esi
 ins:or ebx, esi
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included mov rsi, rbp
 ins:mov rsi, rbp
 reg:rsi
 Exe .text
 INSTSELECTOR: instruction to be included shr rax, 0x20
 ins:shr rax, 0x20
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included mov r12d, ebx
 ins:mov r12d, ebx
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included mov rdx, rax
 ins:mov rdx, rax
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ecx
 ins:mov eax, ecx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub eax, edx
 ins:sub eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x1
 ins:shr eax, 0x1
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add eax, edx
 ins:add eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included shr eax, 0x5
 ins:shr eax, 0x5
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included imul eax, eax, 0x27
 ins:imul eax, eax, 0x27
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included sub ecx, eax
 ins:sub ecx, eax
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included lea rax, ptr [rip+0xa2d0]
 ins:lea rax, ptr [rip+0xa2d0]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rax+rcx*8]
 ins:lea rdi, ptr [rax+rcx*8]
 reg:rdi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r8, qword ptr [rdi]
 ins:mov r8, qword ptr [rdi]
 reg:r8
 Exe .text
 INSTSELECTOR: instruction to be included mov r9, rdi
 ins:mov r9, rdi
 reg:r9
 Exe .text
 INSTSELECTOR: instruction to be included test r8, r8
 ins:test r8, r8
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movsx r10d, byte ptr [rsi]
 ins:movsx r10d, byte ptr [rsi]
 reg:r10d
 Exe .text
 INSTSELECTOR: instruction to be included xor r11d, r11d
 ins:xor r11d, r11d
 reg:r11d
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, qword ptr [r8+0x10]
 ins:mov rdi, qword ptr [r8+0x10]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included movsx eax, byte ptr [rdi]
 ins:movsx eax, byte ptr [rdi]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, r10d
 ins:cmp eax, r10d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov edx, 0x1
 ins:mov edx, 0x1
 reg:edx
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r9
 ins:mov rax, r9
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r13, qword ptr [rax]
 ins:mov r13, qword ptr [rax]
 reg:r13
 Exe .text
 INSTSELECTOR: instruction to be included mov r14, rax
 ins:mov r14, rax
 reg:r14
 Exe .text
 INSTSELECTOR: instruction to be included test r13, r13
 ins:test r13, r13
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r12d, dword ptr [r13+0x8]
 ins:mov r12d, dword ptr [r13+0x8]
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included test r12b, 0x2
 ins:test r12b, 0x2
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test bl, 0x80
 ins:test bl, 0x80
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test bl, 0x80
 ins:test bl, 0x80
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ebx
 ins:mov eax, ebx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included and eax, 0x27
 ins:and eax, 0x27
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, 0x20
 ins:cmp eax, 0x20
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov edi, 0x20
 ins:mov edi, 0x20
 reg:edi
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0x8
 ins:sub rsp, 0x8
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test rax, rax
 ins:test rax, rax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r13, rax
 ins:mov r13, rax
 reg:r13
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [r14]
 ins:mov rax, qword ptr [r14]
 reg:rax
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test r12d, 0x118
 ins:test r12d, 0x118
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, rbp
 ins:mov rdi, rbp
 reg:rdi
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r13
 ins:mov rax, r13
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included pop rbp
 ins:pop rbp
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r13
 ins:pop r13
 reg:r13
 Exe .text
 INSTSELECTOR: instruction to be included pop r14
 ins:pop r14
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r15
 ins:pop r15
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, qword ptr [rbx]
 ins:mov rdi, qword ptr [rbx]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included test rdi, rdi
 ins:test rdi, rdi
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov esi, 0x8
 ins:mov esi, 0x8
 reg:esi
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rip+0x8f74]
 ins:lea rdi, ptr [rip+0x8f74]
 reg:rdi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test rax, rax
 ins:test rax, rax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movzx ebx, byte ptr [r12+0x1]
 ins:movzx ebx, byte ptr [r12+0x1]
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included add r12, 0x1
 ins:add r12, 0x1
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included test bl, bl
 ins:test bl, bl
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r12
 ins:mov rax, r12
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov ecx, r10d
 ins:mov ecx, r10d
 reg:ecx
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, 0x3d
 ins:cmp eax, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp ecx, 0x3d
 ins:cmp ecx, 0x3d
 reg:rflags
 NORMAL FLAG REG: inst cmp ecx, 0x3d
 Exe .text
 INSTSELECTOR: instruction to be included cmovz ecx, r11d
 ins:cmovz ecx, r11d
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, ecx
 ins:cmp eax, ecx
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r9, r8
 ins:mov r9, r8
 reg:r9
 Exe .text
 INSTSELECTOR: instruction to be included mov r8, qword ptr [r8]
 ins:mov r8, qword ptr [r8]
 reg:r8
 Exe .text
 INSTSELECTOR: instruction to be included test r8, r8
 ins:test r8, r8
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, 0x3d
 ins:cmp eax, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movsx eax, byte ptr [rdi+rdx*1]
 ins:movsx eax, byte ptr [rdi+rdx*1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included movsx ecx, byte ptr [rsi+rdx*1]
 ins:movsx ecx, byte ptr [rsi+rdx*1]
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included add rdx, 0x1
 ins:add rdx, 0x1
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, ecx
 ins:cmp eax, ecx
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, 0x3d
 ins:cmp eax, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp ecx, 0x3d
 ins:cmp ecx, 0x3d
 reg:rflags
 NORMAL FLAG REG: inst cmp ecx, 0x3d
 Exe .text
 INSTSELECTOR: instruction to be included cmovz ecx, r11d
 ins:cmovz ecx, r11d
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, ecx
 ins:cmp eax, ecx
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r9, r8
 ins:mov r9, r8
 reg:r9
 Exe .text
 INSTSELECTOR: instruction to be included mov r8, qword ptr [r8]
 ins:mov r8, qword ptr [r8]
 reg:r8
 Exe .text
 INSTSELECTOR: instruction to be included test r8, r8
 ins:test r8, r8
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r9
 ins:mov rax, r9
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, qword ptr [r8+0x10]
 ins:mov rdi, qword ptr [r8+0x10]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included movsx eax, byte ptr [rdi]
 ins:movsx eax, byte ptr [rdi]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, r10d
 ins:cmp eax, r10d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov edx, 0x1
 ins:mov edx, 0x1
 reg:edx
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, 0x3d
 ins:cmp eax, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, 0x3d
 ins:cmp eax, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movsx eax, byte ptr [rdi+rdx*1]
 ins:movsx eax, byte ptr [rdi+rdx*1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included movsx ecx, byte ptr [rsi+rdx*1]
 ins:movsx ecx, byte ptr [rsi+rdx*1]
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included add rdx, 0x1
 ins:add rdx, 0x1
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, ecx
 ins:cmp eax, ecx
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movsx eax, byte ptr [rdi+rdx*1]
 ins:movsx eax, byte ptr [rdi+rdx*1]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included movsx ecx, byte ptr [rsi+rdx*1]
 ins:movsx ecx, byte ptr [rsi+rdx*1]
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included add rdx, 0x1
 ins:add rdx, 0x1
 reg:rdx
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, ecx
 ins:cmp eax, ecx
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, 0x3d
 ins:cmp eax, 0x3d
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp ecx, 0x3d
 ins:cmp ecx, 0x3d
 reg:rflags
 NORMAL FLAG REG: inst cmp ecx, 0x3d
 Exe .text
 INSTSELECTOR: instruction to be included cmovz ecx, r11d
 ins:cmovz ecx, r11d
 reg:ecx
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, ecx
 ins:cmp eax, ecx
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r9, r8
 ins:mov r9, r8
 reg:r9
 Exe .text
 INSTSELECTOR: instruction to be included mov r8, qword ptr [r8]
 ins:mov r8, qword ptr [r8]
 reg:r8
 Exe .text
 INSTSELECTOR: instruction to be included test r8, r8
 ins:test r8, r8
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r9
 ins:mov rax, r9
 reg:rax
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r15, qword ptr [r13+0x18]
 ins:mov r15, qword ptr [r13+0x18]
 reg:r15
 Exe .text
 INSTSELECTOR: instruction to be included test r15, r15
 ins:test r15, r15
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test bl, 0x40
 ins:test bl, 0x40
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test r12b, 0x18
 ins:test r12b, 0x18
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov esi, 0x3d
 ins:mov esi, 0x3d
 reg:esi
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, rbp
 ins:mov rdi, rbp
 reg:rdi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea rdi, ptr [rax+0x1]
 ins:lea rdi, ptr [rax+0x1]
 reg:rdi
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [rip+0x16435]
 ins:mov rax, qword ptr [rip+0x16435]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included push r14
 ins:push r14
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov r14d, 0x270f
 ins:mov r14d, 0x270f
 reg:r14d
 Exe .text
 INSTSELECTOR: instruction to be included push r13
 ins:push r13
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov r13d, 0xffffffff
 ins:mov r13d, 0xffffffff
 reg:r13d
 Exe .text
 INSTSELECTOR: instruction to be included push r12
 ins:push r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included xor r12d, r12d
 ins:xor r12d, r12d
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included push rbp
 ins:push rbp
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included lea rbp, ptr [rax+0x5]
 ins:lea rbp, ptr [rax+0x5]
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included push rbx
 ins:push rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rbx, rdi
 ins:mov rbx, rdi
 reg:rbx
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movzx edx, byte ptr [rbp]
 ins:movzx edx, byte ptr [rbp]
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, byte ptr [rbx]
 ins:movzx eax, byte ptr [rbx]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp dl, al
 ins:cmp dl, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test dl, dl
 ins:test dl, dl
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x3a
 ins:cmp al, 0x3a
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test al, al
 ins:test al, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rbx, 0x1
 ins:add rbx, 0x1
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included cmp r13d, 0xffffffff
 ins:cmp r13d, 0xffffffff
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x25
 ins:cmp al, 0x25
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x3a
 ins:cmp al, 0x3a
 reg:rflags
 NORMAL FLAG REG: inst cmp al, 0x3a
 Exe .text
 INSTSELECTOR: instruction to be included setz al
 ins:setz al
 reg:al
 Exe .text
 INSTSELECTOR: instruction to be included add rbp, 0x1
 ins:add rbp, 0x1
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, al
 ins:movzx eax, al
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add r12d, eax
 ins:add r12d, eax
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included movzx edx, byte ptr [rbp]
 ins:movzx edx, byte ptr [rbp]
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, byte ptr [rbx]
 ins:movzx eax, byte ptr [rbx]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp dl, al
 ins:cmp dl, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test dl, dl
 ins:test dl, dl
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x3a
 ins:cmp al, 0x3a
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included lea r14d, ptr [r12+0x1]
 ins:lea r14d, ptr [r12+0x1]
 reg:r14d
 Exe .text
 INSTSELECTOR: instruction to be included mov rbp, rbx
 ins:mov rbp, rbx
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included test al, al
 ins:test al, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, dword ptr [rip+0x1624f]
 ins:mov eax, dword ptr [rip+0x1624f]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp r13d, 0xffffffff
 ins:cmp r13d, 0xffffffff
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rbx, 0x1
 ins:add rbx, 0x1
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included cmp r13d, 0xffffffff
 ins:cmp r13d, 0xffffffff
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x25
 ins:cmp al, 0x25
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp al, 0x3a
 ins:cmp al, 0x3a
 reg:rflags
 NORMAL FLAG REG: inst cmp al, 0x3a
 Exe .text
 INSTSELECTOR: instruction to be included setz al
 ins:setz al
 reg:al
 Exe .text
 INSTSELECTOR: instruction to be included add rbp, 0x1
 ins:add rbp, 0x1
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, al
 ins:movzx eax, al
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included add r12d, eax
 ins:add r12d, eax
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included movzx edx, byte ptr [rbp]
 ins:movzx edx, byte ptr [rbp]
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included movzx eax, byte ptr [rbx]
 ins:movzx eax, byte ptr [rbx]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp dl, al
 ins:cmp dl, al
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, dword ptr [rip+0x1624f]
 ins:mov eax, dword ptr [rip+0x1624f]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp r13d, 0xffffffff
 ins:cmp r13d, 0xffffffff
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included cmp r13d, 0xffffffff
 ins:cmp r13d, 0xffffffff
 reg:rflags
 NORMAL FLAG REG: inst cmp r13d, 0xffffffff
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, 0x0
 ins:mov eax, 0x0
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmovz r14d, eax
 ins:cmovz r14d, eax
 reg:r14d
 Exe .text
 INSTSELECTOR: instruction to be included mov edi, r14d
 ins:mov edi, r14d
 reg:edi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov edi, r14d
 ins:mov edi, r14d
 reg:edi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included push r13
 ins:push r13
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push r12
 ins:push r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included push rbp
 ins:push rbp
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov ebp, edi
 ins:mov ebp, edi
 reg:ebp
 Exe .text
 INSTSELECTOR: instruction to be included push rbx
 ins:push rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included sub rsp, 0x8
 ins:sub rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included add dword ptr [rip+0x17a95], 0x1
 ins:add dword ptr [rip+0x17a95], 0x1
 reg:rflags
 COMP2MEM: inst add dword ptr [rip+0x17a95], 0x1
 Exe .text
 INSTSELECTOR: instruction to be included lea r12, ptr [rip+0x17366]
 ins:lea r12, ptr [rip+0x17366]
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included lea r13, ptr [r12+0xf8]
 ins:lea r13, ptr [r12+0xf8]
 reg:r13
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, qword ptr [r12]
 ins:mov rdi, qword ptr [r12]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included mov rbx, r12
 ins:mov rbx, r12
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included test rdi, rdi
 ins:test rdi, rdi
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add r12, 0x8
 ins:add r12, 0x8
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included cmp r12, r13
 ins:cmp r12, r13
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included sub dword ptr [rip+0x17a1e], 0x1
 ins:sub dword ptr [rip+0x17a1e], 0x1
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, dword ptr [rip+0x17a26]
 ins:mov eax, dword ptr [rip+0x17a26]
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included test eax, eax
 ins:test eax, eax
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, qword ptr [r12]
 ins:mov rdi, qword ptr [r12]
 reg:rdi
 Exe .text
 INSTSELECTOR: instruction to be included mov rbx, r12
 ins:mov rbx, r12
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included test rdi, rdi
 ins:test rdi, rdi
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included pop rbp
 ins:pop rbp
 reg:rbp
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r13
 ins:pop r13
 reg:r13
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop rbp
 ins:pop rbp
 reg:rbp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r13
 ins:pop r13
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r14
 ins:pop r14
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov r12d, dword ptr [r13+0x8]
 ins:mov r12d, dword ptr [r13+0x8]
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included test r12b, 0x18
 ins:test r12b, 0x18
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rdi, qword ptr [r13+0x10]
 ins:mov rdi, qword ptr [r13+0x10]
 reg:rdi
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov edx, r12d
 ins:mov edx, r12d
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included mov eax, ebx
 ins:mov eax, ebx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included and r12d, 0xfffffec7
 ins:and r12d, 0xfffffec7
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included and eax, 0x27
 ins:and eax, 0x27
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included and edx, 0x4
 ins:and edx, 0x4
 reg:edx
 Exe .text
 INSTSELECTOR: instruction to be included or r12d, ebx
 ins:or r12d, ebx
 reg:r12d
 Exe .text
 INSTSELECTOR: instruction to be included or eax, edx
 ins:or eax, edx
 reg:eax
 Exe .text
 INSTSELECTOR: instruction to be included cmp eax, 0x20
 ins:cmp eax, 0x20
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test r12d, 0x118
 ins:test r12d, 0x118
 reg:rflags
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r13
 ins:mov rax, r13
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included pop rbp
 ins:pop rbp
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r13
 ins:pop r13
 reg:r13
 Exe .text
 INSTSELECTOR: instruction to be included pop r14
 ins:pop r14
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included pop r15
 ins:pop r15
 reg:r15
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included test bl, bl
 ins:test bl, bl
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r12
 ins:mov rax, r12
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:rsp
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, qword ptr [rax]
 ins:mov rax, qword ptr [rax]
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included test byte ptr [rax+rbx*2], 0x8
 ins:test byte ptr [rax+rbx*2], 0x8
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included movzx ebx, byte ptr [r12+0x1]
 ins:movzx ebx, byte ptr [r12+0x1]
 reg:ebx
 Exe .text
 INSTSELECTOR: instruction to be included add r12, 0x1
 ins:add r12, 0x1
 reg:r12
 Exe .text
 INSTSELECTOR: instruction to be included test bl, bl
 ins:test bl, bl
 reg:rflags
 Exe .text
 Exe .text
 INSTSELECTOR: instruction to be included add rsp, 0x8
 ins:add rsp, 0x8
 reg:rsp
 Exe .text
 INSTSELECTOR: instruction to be included mov rax, r12
 ins:mov rax, r12
 reg:rax
 Exe .text
 INSTSELECTOR: instruction to be included pop rbx
 ins:pop rbx
 reg:rbx
 Exe .text
 INSTSELECTOR: instruction to be included pop r12
 ins:pop r12
 reg:r12
 Exe .text
